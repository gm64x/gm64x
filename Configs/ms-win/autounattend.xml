<?xml version="1.0" encoding="utf-8"?>
<unattend xmlns="urn:schemas-microsoft-com:unattend"
	xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
	<!--https://schneegans.de/windows/unattend-generator/?LanguageMode=Unattended&UILanguage=pt-BR&Locale=pt-BR&Keyboard=00010416&GeoLocation=32&ProcessorArchitecture=amd64&ComputerNameMode=Random&CompactOsMode=Default&TimeZoneMode=Implicit&PartitionMode=Unattended&PartitionLayout=GPT&EspSize=300&RecoveryMode=Partition&RecoverySize=3500&DiskAssertionMode=Skip&WindowsEditionMode=Generic&WindowsEdition=pro&InstallFromMode=Automatic&PEMode=Default&UserAccountMode=Interactive&PasswordExpirationMode=Unlimited&LockoutMode=Default&HideFiles=HiddenSystem&ShowFileExtensions=true&ClassicContextMenu=true&ShowEndTask=true&TaskbarSearch=Icon&TaskbarIconsMode=Default&DisableWidgets=true&DisableBingResults=true&StartTilesMode=Empty&StartPinsMode=Empty&EnableLongPaths=true&EnableRemoteDesktop=true&HardenSystemDriveAcl=true&HideEdgeFre=true&DisableEdgeStartupBoost=true&DeleteWindowsOld=true&EffectsMode=Appearance&DesktopIconsMode=Default&StartFoldersMode=Custom&StartFolderNetwork=true&StartFolderPersonalFolder=true&WifiMode=Interactive&ExpressSettings=DisableAll&LockKeysMode=Skip&StickyKeysMode=Default&ColorMode=Default&WallpaperMode=Script&WallpaperScript=%24url+%3D+%27https%3A%2F%2Fw.wallhaven.cc%2Ffull%2Fly%2Fwallhaven-ly385p.png%27%0D%0A%24output+%3D+%27image.png%27%0D%0A%0D%0AInvoke-WebRequest+-Uri+%24url+-OutFile+%24output+-UseBasicParsing+-TimeoutSec+30%0D%0A&LockScreenMode=Default&Remove3DViewer=true&RemoveBingSearch=true&RemoveCamera=true&RemoveClipchamp=true&RemoveCopilot=true&RemoveCortana=true&RemoveDevHome=true&RemoveFamily=true&RemoveFeedbackHub=true&RemoveGameAssist=true&RemoveGetHelp=true&RemoveHandwriting=true&RemoveInternetExplorer=true&RemoveMailCalendar=true&RemoveMaps=true&RemoveMathInputPanel=true&RemoveMixedReality=true&RemoveZuneVideo=true&RemoveNews=true&RemoveNotepad=true&RemoveOffice365=true&RemoveOneDrive=true&RemoveOneNote=true&RemoveOneSync=true&RemoveOutlook=true&RemovePaint3D=true&RemovePeople=true&RemoveQuickAssist=true&RemoveRecall=true&RemoveSkype=true&RemoveSolitaire=true&RemoveSpeech=true&RemoveTeams=true&RemoveGetStarted=true&RemoveToDo=true&RemoveWeather=true&RemoveFaxAndScan=true&RemoveWindowsMediaPlayer=true&RemoveZuneMusic=true&RemoveWordPad=true&RemoveYourPhone=true&WdacMode=Skip-->
	<settings pass="offlineServicing"></settings>
	<settings pass="windowsPE">
		<component name="Microsoft-Windows-International-Core-WinPE" processorArchitecture="amd64"
			publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<UILanguage>pt-BR</UILanguage>
		</component>
		<component name="Microsoft-Windows-Setup" processorArchitecture="amd64"
			publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<ImageInstall>
				<OSImage>
					<InstallTo>
						<DiskID>0</DiskID>
						<PartitionID>3</PartitionID>
					</InstallTo>
				</OSImage>
			</ImageInstall>
			<UserData>
				<ProductKey>
					<Key>VK7JG-NPHTM-C97JM-9MPGT-3V66T</Key>
					<WillShowUI>OnError</WillShowUI>
				</ProductKey>
				<AcceptEula>true</AcceptEula>
			</UserData>
			<UseConfigurationSet>false</UseConfigurationSet>
			<RunSynchronous>
				<RunSynchronousCommand wcm:action="add">
					<Order>1</Order>
					<Path>cmd.exe /c "&gt;&gt;"X:\diskpart.txt" (echo:SELECT
						DISK=0&amp;echo:CLEAN&amp;echo:CONVERT GPT&amp;echo:CREATE PARTITION EFI
						SIZE=300&amp;echo:FORMAT QUICK FS=FAT32 LABEL=^"System^"&amp;echo:ASSIGN
						LETTER=S&amp;echo:CREATE PARTITION MSR SIZE=16&amp;echo:CREATE PARTITION
						PRIMARY)"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>2</Order>
					<Path>cmd.exe /c "&gt;&gt;"X:\diskpart.txt" (echo:SHRINK
						MINIMUM=3500&amp;echo:FORMAT QUICK FS=NTFS LABEL=^"Windows^"&amp;echo:ASSIGN
						LETTER=W&amp;echo:CREATE PARTITION PRIMARY&amp;echo:FORMAT QUICK FS=NTFS
						LABEL=^"Recovery^"&amp;echo:ASSIGN LETTER=R)"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>3</Order>
					<Path>cmd.exe /c "&gt;&gt;"X:\diskpart.txt" (echo:SET
						ID=^"de94bba4-06d1-4d40-a16a-bfd50179d6ac^"&amp;echo:GPT
						ATTRIBUTES=0x8000000000000001)"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>4</Order>
					<Path>cmd.exe /c "diskpart.exe /s "X:\diskpart.txt" &gt;&gt;"X:\diskpart.log" ||
						( type "X:\diskpart.log" &amp; echo diskpart encountered an error. &amp;
						pause &amp; exit /b 1 )"</Path>
				</RunSynchronousCommand>
			</RunSynchronous>
		</component>
	</settings>
	<settings pass="generalize"></settings>
	<settings pass="specialize">
		<component name="Microsoft-Windows-Deployment" processorArchitecture="amd64"
			publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<RunSynchronous>
				<RunSynchronousCommand wcm:action="add">
					<Order>1</Order>
					<Path>powershell.exe -WindowStyle Normal -NoProfile -Command "$xml =
						[xml]::new(); $xml.Load('C:\Windows\Panther\unattend.xml'); $sb =
						[scriptblock]::Create( $xml.unattend.Extensions.ExtractScript );
						Invoke-Command -ScriptBlock $sb -ArgumentList $xml;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>2</Order>
					<Path>powershell.exe -WindowStyle Normal -NoProfile -Command "Get-Content
						-LiteralPath 'C:\Windows\Setup\Scripts\Specialize.ps1' -Raw |
						Invoke-Expression;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>3</Order>
					<Path>reg.exe load "HKU\DefaultUser" "C:\Users\Default\NTUSER.DAT"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>4</Order>
					<Path>powershell.exe -WindowStyle Normal -NoProfile -Command "Get-Content
						-LiteralPath 'C:\Windows\Setup\Scripts\DefaultUser.ps1' -Raw |
						Invoke-Expression;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>5</Order>
					<Path>reg.exe unload "HKU\DefaultUser"</Path>
				</RunSynchronousCommand>
			</RunSynchronous>
		</component>
	</settings>
	<settings pass="auditSystem"></settings>
	<settings pass="auditUser"></settings>
	<settings pass="oobeSystem">
		<component name="Microsoft-Windows-International-Core" processorArchitecture="amd64"
			publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<InputLocale>0416:00010416</InputLocale>
			<SystemLocale>pt-BR</SystemLocale>
			<UILanguage>pt-BR</UILanguage>
			<UserLocale>pt-BR</UserLocale>
		</component>
		<component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64"
			publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<OOBE>
				<ProtectYourPC>3</ProtectYourPC>
				<HideEULAPage>true</HideEULAPage>
				<HideWirelessSetupInOOBE>false</HideWirelessSetupInOOBE>
				<HideOnlineAccountScreens>false</HideOnlineAccountScreens>
			</OOBE>
			<FirstLogonCommands>
				<SynchronousCommand wcm:action="add">
					<Order>1</Order>
					<CommandLine>powershell.exe -WindowStyle Normal -NoProfile -Command "Get-Content
						-LiteralPath 'C:\Windows\Setup\Scripts\FirstLogon.ps1' -Raw |
						Invoke-Expression;"</CommandLine>
				</SynchronousCommand>
			</FirstLogonCommands>
		</component>
	</settings>
	<Extensions xmlns="https://schneegans.de/windows/unattend-generator/">
		<ExtractScript>
			param(
			[xml] $Document
			);

			foreach( $file in $Document.unattend.Extensions.File ) {
			$path = [System.Environment]::ExpandEnvironmentVariables( $file.GetAttribute( 'path' )
			);
			mkdir -Path( $path | Split-Path -Parent ) -ErrorAction 'SilentlyContinue';
			$encoding = switch( [System.IO.Path]::GetExtension( $path ) ) {
			{ $_ -in '.ps1', '.xml' } { [System.Text.Encoding]::UTF8; }
			{ $_ -in '.reg', '.vbs', '.js' } { [System.Text.UnicodeEncoding]::new( $false, $true );
			}
			default { [System.Text.Encoding]::Default; }
			};
			$bytes = $encoding.GetPreamble() + $encoding.GetBytes( $file.InnerText.Trim() );
			[System.IO.File]::WriteAllBytes( $path, $bytes );
			}
		</ExtractScript>
		<File path="C:\Windows\Setup\Scripts\RemovePackages.ps1">
			$selectors = @(
			'Microsoft.Microsoft3DViewer';
			'Microsoft.BingSearch';
			'Microsoft.WindowsCamera';
			'Clipchamp.Clipchamp';
			'Microsoft.549981C3F5F10';
			'Microsoft.Windows.DevHome';
			'MicrosoftCorporationII.MicrosoftFamily';
			'Microsoft.WindowsFeedbackHub';
			'Microsoft.Edge.GameAssist';
			'Microsoft.GetHelp';
			'Microsoft.Getstarted';
			'microsoft.windowscommunicationsapps';
			'Microsoft.WindowsMaps';
			'Microsoft.MixedReality.Portal';
			'Microsoft.BingNews';
			'Microsoft.WindowsNotepad';
			'Microsoft.MicrosoftOfficeHub';
			'Microsoft.Office.OneNote';
			'Microsoft.OutlookForWindows';
			'Microsoft.MSPaint';
			'Microsoft.People';
			'MicrosoftCorporationII.QuickAssist';
			'Microsoft.SkypeApp';
			'Microsoft.MicrosoftSolitaireCollection';
			'MicrosoftTeams';
			'MSTeams';
			'Microsoft.Todos';
			'Microsoft.BingWeather';
			'Microsoft.YourPhone';
			'Microsoft.ZuneMusic';
			'Microsoft.ZuneVideo';
			);
			$getCommand = {
			Get-AppxProvisionedPackage -Online;
			};
			$filterCommand = {
			$_.DisplayName -eq $selector;
			};
			$removeCommand = {
			[CmdletBinding()]
			param(
			[Parameter( Mandatory, ValueFromPipeline )]
			$InputObject
			);
			process {
			$InputObject | Remove-AppxProvisionedPackage -AllUsers -Online -ErrorAction 'Continue';
			}
			};
			$type = 'Package';
			$logfile = 'C:\Windows\Setup\Scripts\RemovePackages.log';
			&amp; {
			$installed = &amp; $getCommand;
			foreach( $selector in $selectors ) {
			$result = [ordered] @{
			Selector = $selector;
			};
			$found = $installed | Where-Object -FilterScript $filterCommand;
			if( $found ) {
			$result.Output = $found | &amp; $removeCommand;
			if( $? ) {
			$result.Message = "$type removed.";
			} else {
			$result.Message = "$type not removed.";
			$result.Error = $Error[0];
			}
			} else {
			$result.Message = "$type not installed.";
			}
			$result | ConvertTo-Json -Depth 3 -Compress;
			}
			} *&gt;&amp;1 &gt;&gt; $logfile;
		</File>
		<File path="C:\Windows\Setup\Scripts\RemoveCapabilities.ps1">
			$selectors = @(
			'Print.Fax.Scan';
			'Language.Handwriting';
			'Browser.InternetExplorer';
			'MathRecognizer';
			'OneCoreUAP.OneSync';
			'App.Support.QuickAssist';
			'Language.Speech';
			'Language.TextToSpeech';
			'Media.WindowsMediaPlayer';
			'Microsoft.Windows.WordPad';
			);
			$getCommand = {
			Get-WindowsCapability -Online | Where-Object -Property 'State' -NotIn -Value @(
			'NotPresent';
			'Removed';
			);
			};
			$filterCommand = {
			($_.Name -split '~')[0] -eq $selector;
			};
			$removeCommand = {
			[CmdletBinding()]
			param(
			[Parameter( Mandatory, ValueFromPipeline )]
			$InputObject
			);
			process {
			$InputObject | Remove-WindowsCapability -Online -ErrorAction 'Continue';
			}
			};
			$type = 'Capability';
			$logfile = 'C:\Windows\Setup\Scripts\RemoveCapabilities.log';
			&amp; {
			$installed = &amp; $getCommand;
			foreach( $selector in $selectors ) {
			$result = [ordered] @{
			Selector = $selector;
			};
			$found = $installed | Where-Object -FilterScript $filterCommand;
			if( $found ) {
			$result.Output = $found | &amp; $removeCommand;
			if( $? ) {
			$result.Message = "$type removed.";
			} else {
			$result.Message = "$type not removed.";
			$result.Error = $Error[0];
			}
			} else {
			$result.Message = "$type not installed.";
			}
			$result | ConvertTo-Json -Depth 3 -Compress;
			}
			} *&gt;&amp;1 &gt;&gt; $logfile;
		</File>
		<File path="C:\Windows\Setup\Scripts\RemoveFeatures.ps1">
			$selectors = @(
			'Recall';
			);
			$getCommand = {
			Get-WindowsOptionalFeature -Online | Where-Object -Property 'State' -NotIn -Value @(
			'Disabled';
			'DisabledWithPayloadRemoved';
			);
			};
			$filterCommand = {
			$_.FeatureName -eq $selector;
			};
			$removeCommand = {
			[CmdletBinding()]
			param(
			[Parameter( Mandatory, ValueFromPipeline )]
			$InputObject
			);
			process {
			$InputObject | Disable-WindowsOptionalFeature -Online -Remove -NoRestart -ErrorAction
			'Continue';
			}
			};
			$type = 'Feature';
			$logfile = 'C:\Windows\Setup\Scripts\RemoveFeatures.log';
			&amp; {
			$installed = &amp; $getCommand;
			foreach( $selector in $selectors ) {
			$result = [ordered] @{
			Selector = $selector;
			};
			$found = $installed | Where-Object -FilterScript $filterCommand;
			if( $found ) {
			$result.Output = $found | &amp; $removeCommand;
			if( $? ) {
			$result.Message = "$type removed.";
			} else {
			$result.Message = "$type not removed.";
			$result.Error = $Error[0];
			}
			} else {
			$result.Message = "$type not installed.";
			}
			$result | ConvertTo-Json -Depth 3 -Compress;
			}
			} *&gt;&amp;1 &gt;&gt; $logfile;
		</File>
		<File path="C:\Windows\Setup\Scripts\SetStartPins.ps1">
			$json = '{"pinnedList":[]}';
			if( [System.Environment]::OSVersion.Version.Build -lt 20000 ) {
			return;
			}
			$key = 'Registry::HKLM\SOFTWARE\Microsoft\PolicyManager\current\device\Start';
			New-Item -Path $key -ItemType 'Directory' -ErrorAction 'SilentlyContinue';
			Set-ItemProperty -LiteralPath $key -Name 'ConfigureStartPins' -Value $json -Type
			'String';
		</File>
		<File path="C:\Users\Default\AppData\Local\Microsoft\Windows\Shell\LayoutModification.xml">
			&lt;LayoutModificationTemplate Version="1"
			xmlns="http://schemas.microsoft.com/Start/2014/LayoutModification"&gt;
			&lt;LayoutOptions StartTileGroupCellWidth="6" /&gt;
			&lt;DefaultLayoutOverride&gt;
			&lt;StartLayoutCollection&gt;
			&lt;StartLayout GroupCellWidth="6"
			xmlns="http://schemas.microsoft.com/Start/2014/FullDefaultLayout" /&gt;
			&lt;/StartLayoutCollection&gt;
			&lt;/DefaultLayoutOverride&gt;
			&lt;/LayoutModificationTemplate&gt;
		</File>
		<File path="C:\Windows\Setup\Scripts\GetWallpaper.ps1">
			$url = 'https://w.wallhaven.cc/full/ly/wallhaven-ly385p.png'
			$output = 'image.png'

			Invoke-WebRequest -Uri $url -OutFile $output -UseBasicParsing -TimeoutSec 30
		</File>
		<File path="C:\Windows\Setup\Scripts\SetWallpaper.ps1">
			Add-Type -TypeDefinition '
			using System.Drawing;
			using System.Runtime.InteropServices;

			public static class WallpaperSetter {
			[DllImport("user32.dll")]
			private static extern bool SetSysColors(
			int cElements,
			int[] lpaElements,
			int[] lpaRgbValues
			);

			[DllImport("user32.dll")]
			private static extern bool SystemParametersInfo(
			uint uiAction,
			uint uiParam,
			string pvParam,
			uint fWinIni
			);

			public static void SetDesktopBackground(Color color) {
			SystemParametersInfo(20, 0, "", 0);
			SetSysColors(1, new int[] { 1 }, new int[] { ColorTranslator.ToWin32(color) });
			}

			public static void SetDesktopImage(string file) {
			SystemParametersInfo(20, 0, file, 0);
			}
			}
			' -ReferencedAssemblies 'System.Drawing';

			function Set-WallpaperColor {
			param(
			[string]
			$HtmlColor
			);

			$color = [System.Drawing.ColorTranslator]::FromHtml( $HtmlColor );
			[WallpaperSetter]::SetDesktopBackground( $color );
			Set-ItemProperty -Path
			'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Wallpapers' -Name
			'BackgroundType' -Type 'DWord' -Value 1 -Force;
			Set-ItemProperty -Path 'Registry::HKCU\Control Panel\Desktop' -Name 'WallPaper' -Type
			'String' -Value '' -Force;
			Set-ItemProperty -Path 'Registry::HKCU\Control Panel\Colors' -Name 'Background' -Type
			'String' -Value "$($color.R) $($color.G) $($color.B)" -Force;
			}

			function Set-WallpaperImage {
			param(
			[string]
			$LiteralPath
			);

			if( $LiteralPath | Test-Path ) {
			[WallpaperSetter]::SetDesktopImage( $LiteralPath );
			Set-ItemProperty -Path
			'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Wallpapers' -Name
			'BackgroundType' -Type 'DWord' -Value 0 -Force;
			Set-ItemProperty -Path 'Registry::HKCU\Control Panel\Desktop' -Name 'WallPaper' -Type
			'String' -Value $LiteralPath -Force;
			} else {
			"Cannot use '$LiteralPath' as a desktop wallpaper because that file does not exist.";
			}
			}
			Set-WallpaperImage -LiteralPath 'C:\Windows\Setup\Scripts\Wallpaper';
		</File>
		<File path="C:\Windows\Setup\Scripts\Specialize.ps1">
			$scripts = @(
			{
			Remove-Item -LiteralPath
			'Registry::HKLM\Software\Microsoft\WindowsUpdate\Orchestrator\UScheduler_Oobe\DevHomeUpdate'
			-Force -ErrorAction 'SilentlyContinue';
			};
			{
			reg.exe add "HKCR\.txt\ShellNew" /v ItemName /t REG_EXPAND_SZ /d
			"@C:\Windows\system32\notepad.exe,-470" /f;
			reg.exe add "HKCR\.txt\ShellNew" /v NullFile /t REG_SZ /f;
			reg.exe add "HKCR\txtfilelegacy" /v FriendlyTypeName /t REG_EXPAND_SZ /d
			"@C:\Windows\system32\notepad.exe,-469" /f;
			reg.exe add "HKCR\txtfilelegacy" /ve /t REG_SZ /d "Text Document" /f;
			};
			{
			Remove-Item -LiteralPath 'C:\Users\Default\AppData\Roaming\Microsoft\Windows\Start
			Menu\Programs\OneDrive.lnk', 'C:\Windows\System32\OneDriveSetup.exe',
			'C:\Windows\SysWOW64\OneDriveSetup.exe' -ErrorAction 'Continue';
			};
			{
			Remove-Item -LiteralPath
			'Registry::HKLM\Software\Microsoft\WindowsUpdate\Orchestrator\UScheduler_Oobe\OutlookUpdate'
			-Force -ErrorAction 'SilentlyContinue';
			};
			{
			reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Communications" /v
			ConfigureChatAutoInstall /t REG_DWORD /d 0 /f;
			};
			{
			Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\RemovePackages.ps1' -Raw |
			Invoke-Expression;
			};
			{
			Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\RemoveCapabilities.ps1' -Raw |
			Invoke-Expression;
			};
			{
			Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\RemoveFeatures.ps1' -Raw |
			Invoke-Expression;
			};
			{
			net.exe accounts /maxpwage:UNLIMITED;
			};
			{
			reg.exe add "HKLM\SYSTEM\CurrentControlSet\Control\FileSystem" /v LongPathsEnabled /t
			REG_DWORD /d 1 /f
			};
			{
			netsh.exe advfirewall firewall set rule group="@FirewallAPI.dll,-28752" new enable=Yes;
			reg.exe add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server" /v
			fDenyTSConnections /t REG_DWORD /d 0 /f;
			};
			{
			icacls.exe C:\ /remove:g "*S-1-5-11"
			};
			{
			reg.exe add "HKLM\SOFTWARE\Policies\Microsoft\Dsh" /v AllowNewsAndInterests /t REG_DWORD
			/d 0 /f;
			};
			{
			reg.exe add "HKLM\Software\Policies\Microsoft\Edge" /v HideFirstRunExperience /t
			REG_DWORD /d 1 /f;
			};
			{
			reg.exe add "HKLM\Software\Policies\Microsoft\Edge\Recommended" /v BackgroundModeEnabled
			/t REG_DWORD /d 0 /f;
			reg.exe add "HKLM\Software\Policies\Microsoft\Edge\Recommended" /v StartupBoostEnabled
			/t REG_DWORD /d 0 /f;
			};
			{
			Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\SetStartPins.ps1' -Raw |
			Invoke-Expression;
			};
			{
			Set-ItemProperty -LiteralPath
			"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\ControlAnimations"
			-Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
			Set-ItemProperty -LiteralPath
			"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\AnimateMinMax"
			-Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
			Set-ItemProperty -LiteralPath
			"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\TaskbarAnimations"
			-Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
			Set-ItemProperty -LiteralPath
			"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\DWMAeroPeekEnabled"
			-Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
			Set-ItemProperty -LiteralPath
			"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\MenuAnimation"
			-Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
			Set-ItemProperty -LiteralPath
			"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\TooltipAnimation"
			-Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
			Set-ItemProperty -LiteralPath
			"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\SelectionFade"
			-Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
			Set-ItemProperty -LiteralPath
			"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\DWMSaveThumbnailEnabled"
			-Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
			Set-ItemProperty -LiteralPath
			"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\CursorShadow"
			-Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
			Set-ItemProperty -LiteralPath
			"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\ListviewShadow"
			-Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
			Set-ItemProperty -LiteralPath
			"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\ThumbnailsOrIcon"
			-Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
			Set-ItemProperty -LiteralPath
			"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\ListviewAlphaSelect"
			-Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
			Set-ItemProperty -LiteralPath
			"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\DragFullWindows"
			-Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
			Set-ItemProperty -LiteralPath
			"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\ComboBoxAnimation"
			-Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
			Set-ItemProperty -LiteralPath
			"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\FontSmoothing"
			-Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
			Set-ItemProperty -LiteralPath
			"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\ListBoxSmoothScrolling"
			-Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
			Set-ItemProperty -LiteralPath
			"Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects\DropShadow"
			-Name 'DefaultValue' -Value 1 -Type 'DWord' -Force;
			};
			{
			try {
			$bytes = Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\GetWallpaper.ps1' -Raw |
			Invoke-Expression;
			[System.IO.File]::WriteAllBytes( 'C:\Windows\Setup\Scripts\Wallpaper', $bytes );
			} catch {
			$_;
			}
			};
			);

			&amp; {
			[float] $complete = 0;
			[float] $increment = 100 / $scripts.Count;
			foreach( $script in $scripts ) {
			Write-Progress -Activity 'Running scripts to customize your Windows installation. Do not
			close this window.' -PercentComplete $complete;
			'*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
			$str = $script.ToString().Trim() -replace '\s+', ' ';
			$max = 100;
			if( $str.Length -le $max ) {
			$str;
			} else {
			$str.Substring( 0, $max - 1 ) + '&#x2026;';
			}
			);
			$start = [datetime]::Now;
			&amp; $script;
			'*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start
			).TotalMilliseconds;
			"`r`n" * 3;
			$complete += $increment;
			}
			} *&gt;&amp;1 &gt;&gt; "C:\Windows\Setup\Scripts\Specialize.log";
		</File>
		<File path="C:\Windows\Setup\Scripts\UserOnce.ps1">
			$scripts = @(
			{
			Get-AppxPackage -Name 'Microsoft.Windows.Ai.Copilot.Provider' | Remove-AppxPackage;
			};
			{
			reg.exe add
			"HKCU\Software\Classes\CLSID\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\InprocServer32" /ve
			/f;
			};
			{
			Set-ItemProperty -LiteralPath
			'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Search' -Name
			'SearchboxTaskbarMode' -Type 'DWord' -Value 1;
			};
			{
			Set-ItemProperty -LiteralPath
			'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects'
			-Name 'VisualFXSetting' -Type 'DWord' -Value 1 -Force;
			};
			{
			Set-ItemProperty -Path
			'Registry::HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Start' -Name
			'VisiblePlaces' -Value $(
			[convert]::FromBase64String('RIF1/g0IrkKL2jTtl7ZjlEqwvXRK+WhPi9ZDmAcdqLw=') ) -Type
			'Binary';
			};
			{
			Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\SetWallpaper.ps1' -Raw |
			Invoke-Expression;
			};
			{
			Get-Process -Name 'explorer' -ErrorAction 'SilentlyContinue' | Where-Object
			-FilterScript {
			$_.SessionId -eq ( Get-Process -Id $PID ).SessionId;
			} | Stop-Process -Force;
			};
			);

			&amp; {
			[float] $complete = 0;
			[float] $increment = 100 / $scripts.Count;
			foreach( $script in $scripts ) {
			Write-Progress -Activity 'Running scripts to configure this user account. Do not close
			this window.' -PercentComplete $complete;
			'*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
			$str = $script.ToString().Trim() -replace '\s+', ' ';
			$max = 100;
			if( $str.Length -le $max ) {
			$str;
			} else {
			$str.Substring( 0, $max - 1 ) + '&#x2026;';
			}
			);
			$start = [datetime]::Now;
			&amp; $script;
			'*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start
			).TotalMilliseconds;
			"`r`n" * 3;
			$complete += $increment;
			}
			} *&gt;&amp;1 &gt;&gt; "$env:TEMP\UserOnce.log";
		</File>
		<File path="C:\Windows\Setup\Scripts\DefaultUser.ps1">
			$scripts = @(
			{
			reg.exe add "HKU\DefaultUser\Software\Policies\Microsoft\Windows\WindowsCopilot" /v
			TurnOffWindowsCopilot /t REG_DWORD /d 1 /f;
			};
			{
			reg.exe add "HKU\DefaultUser\Software\Microsoft\Internet
			Explorer\LowRegistry\Audio\PolicyConfig\PropertyStore" /f;
			};
			{
			reg.exe add "HKU\DefaultUser\Software\Microsoft\Notepad" /v ShowStoreBanner /t REG_DWORD
			/d 0 /f;
			};
			{
			Remove-ItemProperty -LiteralPath
			'Registry::HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Run' -Name
			'OneDriveSetup' -Force -ErrorAction 'Continue';
			};
			{
			reg.exe add
			"HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v
			"HideFileExt" /t REG_DWORD /d 0 /f;
			};
			{
			reg.exe add
			"HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v
			"Hidden" /t REG_DWORD /d 1 /f;
			};
			{
			reg.exe add "HKU\DefaultUser\Software\Policies\Microsoft\Windows\Explorer" /v
			DisableSearchBoxSuggestions /t REG_DWORD /d 1 /f;
			};
			{
			reg.exe add
			"HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced\TaskbarDeveloperSettings"
			/v TaskbarEndTask /t REG_DWORD /d 1 /f;
			};
			{
			reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\RunOnce" /v
			"UnattendedSetup" /t REG_SZ /d "powershell.exe -WindowStyle Normal -NoProfile -Command
			\""Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\UserOnce.ps1' -Raw |
			Invoke-Expression;\""" /f;
			};
			);

			&amp; {
			[float] $complete = 0;
			[float] $increment = 100 / $scripts.Count;
			foreach( $script in $scripts ) {
			Write-Progress -Activity 'Running scripts to modify the default user&#x2019;&#x2019;s
			registry hive. Do not close this window.' -PercentComplete $complete;
			'*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
			$str = $script.ToString().Trim() -replace '\s+', ' ';
			$max = 100;
			if( $str.Length -le $max ) {
			$str;
			} else {
			$str.Substring( 0, $max - 1 ) + '&#x2026;';
			}
			);
			$start = [datetime]::Now;
			&amp; $script;
			'*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start
			).TotalMilliseconds;
			"`r`n" * 3;
			$complete += $increment;
			}
			} *&gt;&amp;1 &gt;&gt; "C:\Windows\Setup\Scripts\DefaultUser.log";
		</File>
		<File path="C:\Windows\Setup\Scripts\FirstLogon.ps1">
			$scripts = @(
			{
			cmd.exe /c "rmdir C:\Windows.old";
			};
			{
			Remove-Item -LiteralPath @(
			'C:\Windows\Panther\unattend.xml';
			'C:\Windows\Panther\unattend-original.xml';
			'C:\Windows\Setup\Scripts\Wifi.xml';
			) -Force -ErrorAction 'SilentlyContinue' -Verbose;
			};
			);

			&amp; {
			[float] $complete = 0;
			[float] $increment = 100 / $scripts.Count;
			foreach( $script in $scripts ) {
			Write-Progress -Activity 'Running scripts to finalize your Windows installation. Do not
			close this window.' -PercentComplete $complete;
			'*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
			$str = $script.ToString().Trim() -replace '\s+', ' ';
			$max = 100;
			if( $str.Length -le $max ) {
			$str;
			} else {
			$str.Substring( 0, $max - 1 ) + '&#x2026;';
			}
			);
			$start = [datetime]::Now;
			&amp; $script;
			'*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start
			).TotalMilliseconds;
			"`r`n" * 3;
			$complete += $increment;
			}
			} *&gt;&amp;1 &gt;&gt; "C:\Windows\Setup\Scripts\FirstLogon.log";
		</File>
	</Extensions>
</unattend>